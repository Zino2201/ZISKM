"use strict";(self.webpackChunkziskm=self.webpackChunkziskm||[]).push([[584],{1362:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return d},default:function(){return l}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],r={},c="Custom Animation System/ECS (C++)",m={unversionedId:"advanced/custom-system",id:"advanced/custom-system",isDocsHomePage:!1,title:"Custom Animation System/ECS (C++)",description:"Introduction",source:"@site/docs/advanced/custom-system.md",sourceDirName:"advanced",slug:"/advanced/custom-system",permalink:"/ZISKM/advanced/custom-system",editUrl:"https://github.com/Zino2201/ZISKM/edit/main/docs/advanced/custom-system.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Animation Ticking Rate Optimization",permalink:"/ZISKM/getting-started/uro"},next:{title:"Roadmap",permalink:"/ZISKM/roadmap"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"<code>FZISKMInstanceManager</code>",id:"fziskminstancemanager",children:[]}],u={toc:d};function l(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-animation-systemecs-c"},"Custom Animation System/ECS (C++)"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Even though the plugin provides an Unreal actor component and use Unreal's native systems to provide animation, you can totally plug in your own ECS or/and animation system if required. For now, we do not provide a solution to use the animation blueprint without actor components but we have it working, it may come later \ud83d\udc40"),(0,o.kt)("h2",{id:"fziskminstancemanager"},(0,o.kt)("inlineCode",{parentName:"h2"},"FZISKMInstanceManager")),(0,o.kt)("p",null,"The main class you will be interacting with is ",(0,o.kt)("inlineCode",{parentName:"p"},"FZISKMInstanceManager"),", it is the class responsible for managing all instances and feeding the correct data to the renderer. This class can then be used to spawn a proxy (see ",(0,o.kt)("inlineCode",{parentName:"p"},"FZISKMInstancedSkeletalMeshProxy"),") to render the instances. "),(0,o.kt)("p",null,"It provides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Render thread instance management"),(0,o.kt)("li",{parentName:"ul"},"Frustum culling"),(0,o.kt)("li",{parentName:"ul"},"LOD management")),(0,o.kt)("p",null,"As a reference, you can see how we implemented this class with ",(0,o.kt)("inlineCode",{parentName:"p"},"UZISKMInstancedSkeletalMeshComponent"),", which is just a wrapper around ",(0,o.kt)("inlineCode",{parentName:"p"},"USkeletalMeshComponent")," that feeds its bone data to ",(0,o.kt)("inlineCode",{parentName:"p"},"FZISKMInstanceManager")," through a world subsystem."))}l.isMDXComponent=!0}}]);